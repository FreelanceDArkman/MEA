package csadapter.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Vector;

import org.apache.log4j.Logger;

import csadapter.xmlParser.CSAdapterXmlConfig;

public class TextFile {
	
	//public static String ENCODING_UTF8   = "UTF-8";
	//public static String ENCODING_TIS620 = "TIS-620";
	
	public static String readFirstLine( String fileName ) throws IOException {
		String strLine = "";
		try {
			File fi = new File( fileName );
			if( !fi.exists() ) {
				return null;
			}
			//---------------
			//Read File
			//---------------
			BufferedReader rd = new BufferedReader( new FileReader( fileName ) );
			strLine = rd.readLine();
			rd.close();
		}catch( IOException ex ) {
			throw ex;
		}
		return  strLine.trim();
	}
	
	public static String readTextFile( String fileName ) throws IOException {
		byte[] buffer = null;
		String strBuff;
		try {
			File fi = new File( fileName );
			if( !fi.exists() ) {
				return null;
			}
			//---------------
			//Read File
			//---------------
			FileInputStream in = new FileInputStream( fileName );
			buffer = new byte[ in.available() ];
			in.read( buffer, 0, buffer.length );
			in.close();
			strBuff = new  String( buffer );
		}catch( IOException ex ) {
			throw ex;
		}finally {
			buffer = null;
		}
		return strBuff;
	}
	
	public static BufferedReader getFileReader( String fileName ) throws IOException {
		BufferedReader reader = null;
		try {
			File fi = new File( fileName );
			if( !fi.exists() ) {
				return null;
			}
			reader =  new BufferedReader( new FileReader( fi ));
		}catch( IOException ex ) {
			throw ex;
		}
		return reader;
	}
	
	public static String readTextFile( File file ) throws IOException {
		byte[] buffer = null;
		String strBuff;
		try {
			if( !file.exists() ) {
				return null;
			}
			//---------------
			//Read File
			//---------------
			FileInputStream in = new FileInputStream( file );
			buffer = new byte[ in.available() ];
			in.read( buffer, 0, buffer.length );
			in.close();
			strBuff = new  String( buffer );
		}catch( IOException ex ) {
			throw ex;
		}finally {
			buffer = null;
		}
		return strBuff;
	}
	
	public static String[] readLineTextFile( String fileName ) throws IOException{
		String[] arrList = null;
		try {
			String strData = readTextFile( fileName );
			if( strData != null ) {
				//arrList = MySplit.split( strData, "\r\n" );
				if( strData.indexOf( "\r\n" ) >0 ) {
					arrList = MySplit.split( strData, "\r\n" );
				}else {
					arrList = MySplit.split( strData, "\n" );
				}
			}
		}catch(IOException ex ) {
			throw ex;
		}finally {
		}
		return arrList;
	}
	
	public static String[] readLineTextFile( File file ) throws IOException{
		String[] arrList = null;
		try {
			String strData = readTextFile( file );
			if( strData != null ) {
				if( strData.indexOf( "\r\n" ) >0 ) {
					arrList = MySplit.split( strData, "\r\n" );
				}else {
					arrList = MySplit.split( strData, "\n" );
				}
			}
		}catch(IOException ex ) {
			throw ex;
		}finally {
		}
		return arrList;
	}
	
	public static void writeFile( String pathFile, String text , boolean append ) throws IOException {
		StringBuilder sb  = null;
		String pathFolder = "";
		try {
			pathFolder = pathFile.substring( 0, pathFile.lastIndexOf( "/" ) );
			File dir   = new File( pathFolder );
			if( !dir.exists() ) {
				dir.mkdirs();
			}
			
			Writer out = new BufferedWriter(
					     new OutputStreamWriter( new FileOutputStream( pathFile, append)) );
			out.write( text + "\r\n" );
			out.flush();
			out.close();
			
		}catch( IOException ex ) {
			ex.printStackTrace();
			throw ex;
		}finally {
			sb = null;
		}
	}
	
	public static void writeFile( String pathFile, String text , boolean append, String charSet ) throws IOException {
		StringBuilder sb  = null;
		String pathFolder = "";
		try {
			//pathFolder = pathFile.substring( 0, pathFile.lastIndexOf( "/" ) );
			//File dir   = new File( pathFolder );
			File dir   = new File( pathFile );
			if( !dir.exists() ) {
				//dir.mkdirs();
				dir.getParentFile().mkdirs();
			}
			
			Writer out = new BufferedWriter(
					     new OutputStreamWriter( new FileOutputStream( pathFile, append), charSet ));
			out.write( text + "\r\n" );
			out.flush();
			out.close();
			
		}catch( IOException ex ) {
			ex.printStackTrace();
			throw ex;
		}finally {
			sb = null;
		}
	}
	
	public static void deleteFile( String pathFile ) {
		File fi = new File( pathFile );
		if( fi.exists() ) {
			fi.delete();
		}
	}
	
	public static void renameFile( String srcFile, String targetFile ) {
		File sourceFile = new File( srcFile );
		File disFile    = new File( targetFile );
		//delete distination first!, if found
		if( disFile.exists() && sourceFile.exists() ) {
			disFile.delete();
		}
		
		if( sourceFile.exists() ) {
			sourceFile.renameTo( disFile );
		}
		
	}
	
	public static void moveFile( String sourceFile , String targetFile ) {
		try {
			/*
			 * Initialize Target Folder
			 **/
			String pathFolder = targetFile.substring( 0, targetFile.lastIndexOf( "/" ) );
			File dir   = new File( pathFolder );
			if( !dir.exists() ) {
				dir.mkdirs();
			}
			
			File fileSource = new File( sourceFile );
			fileSource.renameTo( new File( targetFile ) );
		}catch(Exception ex) {
			ex.printStackTrace();
		}
	}
	
	public static void copyFile( String sourceFile , String targetFile ) {
		InputStream inStream   = null;
		OutputStream outStream = null;
		try {
			/*
			 * Initialize Target Folder
			 **/
			String pathFolder = targetFile.substring( 0, targetFile.lastIndexOf( "/" ) );
			File dir   = new File( pathFolder );
			if( !dir.exists() ) {
				dir.mkdirs();
			}
			
			
			File fileSource = new File( sourceFile );
			File fileTarget = new File( targetFile );
			
			inStream  = new FileInputStream( fileSource );
   	        outStream = new FileOutputStream( fileTarget );
			
			byte[] buffer = new byte[1024];
			int length;
			//copy the file content in bytes 
			while( (length = inStream.read(buffer)) > 0 ) {
				outStream.write( buffer, 0, length);
			}
			inStream.close();
			outStream.close();
		}catch(Exception ex) {
			ex.printStackTrace();
		}
	}
	
	public static InputStream loadFile( String pathFile ) {
		InputStream input = null;
		try {
			input = new FileInputStream( pathFile );
		}catch( IOException ex ) {
			ex.printStackTrace();
		}
		return input;

	}
	
	public static BufferedReader loadFile( String pathFile, String charSet ) {
		BufferedReader rd = null;
		try {
			 rd = new BufferedReader( new InputStreamReader( new FileInputStream( pathFile ), charSet ) );
		}catch( IOException ex ) {
			ex.printStackTrace();
		}
		return rd;
	}
	
	public static  long getFileSize( String fullpath ) {
		long fileSize = -1;
		try {
			File file = new File( fullpath ); 
			if( file.exists() ) {
				fileSize = file.length();	
			}
		}catch( Exception ex ) {
		}
		return fileSize;
	}
	
	public static File[] listFile( String pathFolder ) throws IOException {
        File folder        = new File( pathFolder );
        File[] listOfFiles = folder.listFiles();
        return listOfFiles;
    }
	
	public static File[] dirFile( String pathFolder, String extensionFilter ) {
		File[] list = null;
		File dir    = null;
		FileExtensionFilter ext = new FileExtensionFilter( extensionFilter );
		try{
			dir  = new File( pathFolder );
			list = dir.listFiles( ext );
		}catch( Exception ex ){
			ex.printStackTrace();
		}finally{
			dir = null;
			ext = null;
		}
		return list;
	}
	
	public static File[] dirListByAscendingDate( String pathFolder ) {
		File folder        = new File( pathFolder );
	    if (!folder.isDirectory()) {
	      return null;
	    }
	    
	    File files[] = folder.listFiles();
	    Arrays.sort( files, new Comparator()
	    {
	      public int compare(final Object o1, final Object o2) {
	        return new Long(((File)o1).lastModified()).compareTo
	             (new Long(((File) o2).lastModified()));
	      }
	    }); 
	    
	    return files;
	  }  
	
	public static File[] dirListByDescendingDate( String pathFolder ) {
		File folder        = new File( pathFolder );
	    if (!folder.isDirectory()) {
	      return null;
	    }
	    
	    File files[] = folder.listFiles();
	    
	    Arrays.sort( files, new Comparator()
	    {
	      public int compare(final Object o1, final Object o2) {
	        return new Long(((File)o2).lastModified()).compareTo
	             (new Long(((File) o1).lastModified()));
	      }
	    }); 
	    
	    return files;
	  }  
	
	public static boolean makeDirectorys( String strDirectory ) {
		boolean bOk = false;
		try {
//			File dir = new File( strDirectory );
//			if( !dir.exists() ) {
//				bOk = dir.mkdirs();	
//			}
			
			File dir   = new File( strDirectory );
			if( !dir.exists() ) {
				bOk = dir.getParentFile().mkdirs();
			}
		}catch( Exception ex ) {
			ex.printStackTrace();
		}
		return bOk;
	}
	
	
	public static String reNameSuffix( String sourceFileName, String wicard  ){
		//sourceFileName = sourceFileName.substring( 0, sourceFileName.length() -3 );
		sourceFileName = sourceFileName.substring( 0, sourceFileName.lastIndexOf( "." ) + 1 );
		sourceFileName += wicard;
		return sourceFileName;
    }
	
	public static byte[] getFileAsByteStream( String pathFile ) {
		byte[] bytes = null;
		try {
			InputStream is = loadFile( pathFile );
			File file      = new File( pathFile );
			long length    = file.length();
			bytes          = new byte[(int) length];
			
			// Read in the bytes
			int offset  = 0;
			int numRead = 0;
			while ( (offset < bytes.length) 
				&&  ((numRead = is.read( bytes, offset, bytes.length - offset ))
				 >= 0) ) {
				offset += numRead;
			}
			is.close();
		}catch( IOException ex ) {
			ex.printStackTrace();
		}
		return bytes;
	}
	
	public static String findFile( String pathFolder, String fileName ) {
		String fileReturn = null;
		try {
			File[] files = TextFile.listFile( pathFolder );
			if( files == null ) {
				return fileReturn;
			}
			for( File f:files ) {
				if( f.getName().equalsIgnoreCase( fileName ) ) {
					return fileReturn = f.getPath();
				}
			}
		}catch( Exception ex ) {
			ex.printStackTrace();
		}
		return fileReturn;
	}
	
	public static void main(String[] args) {
		String os = System.getProperty("os.name");
		
		System.out.println( "os=" + os );
		
	}

//	public class WriteUTF8Data {
//		   private static final String FILE_ENCODE = "UTF-8";
//		 
//		   public static void main(String[] args) {
//		      String file = "D:/data/thai.txt";
//		      String data = "";
//		      try {
//		         Writer out = new BufferedWriter(
//		               new OutputStreamWriter(new FileOutputStream(file), FILE_ENCODE));
//		         out.write(data);
//		         out.close();
//		         out = null;
//		      } catch (UnsupportedEncodingException e) {
//		         e.printStackTrace();
//		      } catch (IOException e) {
//		         e.printStackTrace();
//		      }
//		   }
//		}
	
	
}//end class
